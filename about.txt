добавим еще один скрипт в package.json, который будет постоянно следить за файлами и при необходимости пересобирать бандлы
"watch": "webpack --mode development --watch"

на этом этапе рассматриваются иные лоадеры.

для json файлов в них нет необходимости, так как вебпак понимает их "из коробки"

проверим это, добавим папку assets. в нее помещаем любой json файл
добавим в index.js импорт и выведем в консоль
import json from './assets/json';
console.log('JSON', json);

работа с картинками
загружаем картинку в assets
в данном случае это webpack-logo.png

импортируем картирку в index.js
import WebpackLogo from './assets/webpack-logo.png';

а так же для наглядности изменим конструктор post, теперь он будет принимать картинку

при сборке произойдет ошибка, так как файлы png не понятны для вебпака.
нужно установить еще один лоадер, который позволяет работать с разными файлами, в частности, с картинками
npm i -D file-loader

теперь добавим этот лоадер в массив правил (rules)
{
  test: /\.(png|jpg|svg|gif)$/,
  use: ['file-loader']
}

теперь в консоле отображается путь до этой картинки.
после сборки ее имя изменилось на сгенерированный вебпаком хеш
для наглядности добавим новый класс в css, в котором будет прописан бекграундом эта картинка.
при этом название файла прописываем первоначальное
добавляем див с этим классом в html
.logo {
  background-image: url("../assets/webpack-logo.png");
  ...
}

далее пример работы со шрифтами
в папке assets добавим директорию fonts, положим в нее какой-нибудь шрифт
для наглядности добавим отдельный файл roboto.css, импортируем его в styles.css. этот файл будет описывать шрифт
@font-face {
  font-family: 'Roboto';
  src: url('../assets/fonts/Roboto-Regular.ttf') format('truetype');
}

а в styles.css добавим этот шрифт на body

но при сборке выдает ошибку, так как импорты в css обрабатываются webpack, он натыкается на не известное ему расширение шрифта.
для этого случая лоадер уже был установлен - file-loader.
пропишем новые правила для обработки шрифтов
{
  test: /\.(ttf|woff|woff2|eot)/,
  use: ['file-loader']
}

добавление библиотек.
для примера используем normalize.css
установим зависимости
npm i normalize.css

добавляем импорт через знак ~ в style.css, который сообщает webpack, что нужно брать зависимости из node_modules
@import "~normalize.css";

далее в курсе речь идет о работе с xml и csv файлами
для их обработки необходимо подключить xml-loader и csv-loader
здесь их не стал подключать.
для csv необходимо еще установить npm i -D papaparse иначе файл не парсится (в конфиге он не прописывается)

